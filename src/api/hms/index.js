const DataType = {
    Identifier: '\n    {\n  // from Element: extension\n  "use" : "<code>", // usual | official | temp | secondary | old (If known)\n  "type" : { CodeableConcept }, // Description of identifier\n  "system" : "<uri>", // The namespace for the identifier value\n  "value" : "<string>", // I The value that is unique\n  "period" : { Period }, // Time period when id is/was valid for use\n  "assigner" : { Reference(Organization) } // Organization that issued id (may be just text)\n}\n\n\n\n   ',
    HumanName: '\n    {\n  // from Element: extension\n  "use" : "<code>", // usual | official | temp | nickname | anonymous | old | maiden\n  "text" : "<string>", // Text representation of the full name\n  "family" : "<string>", // Family name (often called \'Surname\')\n  "given" : ["<string>"], // Given names (not always \'first\'). Includes middle names\n  "prefix" : ["<string>"], // Parts that come before the name\n  "suffix" : ["<string>"], // Parts that come after the name\n  "period" : { Period } // Time period when name was/is in use\n}\n\n\n\n   ',
    Address: '\n    {\n  // from Element: extension\n  "use" : "<code>", // home | work | temp | old | billing - purpose of this address\n  "type" : "<code>", // postal | physical | both\n  "text" : "<string>", // Text representation of the address\n  "line" : ["<string>"], // Street name, number, direction & P.O. Box etc.\n  "city" : "<string>", // Name of city, town etc.\n  "district" : "<string>", // District name (aka county)\n  "state" : "<string>", // Sub-unit of country (abbreviations ok)\n  "postalCode" : "<string>", // Postal code for area\n  "country" : "<string>", // Country (e.g. may be ISO 3166 2 or 3 letter code)\n  "period" : { Period } // Time period when address was/is in use\n}\n\n\n\n   ',
    ContactPoint: '\n    {\n  // from Element: extension\n  "system" : "<code>", // I phone | fax | email | pager | url | sms | other\n  "value" : "<string>", // I The actual contact point details\n  "use" : "<code>", // home | work | temp | old | mobile - purpose of this contact point\n  "rank" : "<positiveInt>", // Specify preferred order of use (1 = highest)\n  "period" : { Period } // Time period when the contact point was/is in use\n}\n\n\n\n   ',
    Timing: '\n    {\n  // from Element: extension\n  "event" : ["<dateTime>"], // When the event occurs\n  "repeat" : { // When the event is to occur\n    // bounds[x]: Length/Range of lengths, or (Start and/or end) limits. One of these 3:\n    "boundsDuration" : { Duration },\n    "boundsRange" : { Range },\n    "boundsPeriod" : { Period },\n    "count" : "<positiveInt>", // I Number of times to repeat\n    "countMax" : "<positiveInt>", // I Maximum number of times to repeat\n    "duration" : <decimal>, // I How long when it happens\n    "durationMax" : <decimal>, // I How long when it happens (Max)\n    "durationUnit" : "<code>", // I s | min | h | d | wk | mo | a - unit of time (UCUM)\n    "frequency" : "<positiveInt>", // Indicates the number of repetitions that should occur within a period. I.e. Event occurs frequency times per period\n    "frequencyMax" : "<positiveInt>", // Event occurs up to frequencyMax times per period\n    "period" : <decimal>, // I The duration to which the frequency applies. I.e. Event occurs frequency times per period\n    "periodMax" : <decimal>, // I Upper limit of period (3-4 hours)\n    "periodUnit" : "<code>", // I s | min | h | d | wk | mo | a - unit of time (UCUM)\n    "dayOfWeek" : ["<code>"], // mon | tue | wed | thu | fri | sat | sun\n    "timeOfDay" : ["<time>"], // I Time of day for action\n    "when" : ["<code>"], // I Code for time period of occurrence\n    "offset" : "<unsignedInt>" // I Minutes from event (before or after)\n  },\n  "code" : { CodeableConcept } // C | BID | TID | QID | AM | PM | QD | QOD | +\n}\n\n\n\n   ',
    Quantity: '\n    {\n  // from Element: extension\n  "value" : <decimal>, // Numerical value (with implicit precision)\n  "comparator" : "<code>", // < | <= | >= | > | ad - how to understand the value\n  "unit" : "<string>", // Unit representation\n  "system" : "<uri>", // I System that defines coded unit form\n  "code" : "<code>" // I Coded form of the unit\n}\n\n\n\n   ',
    Attachment: '\n    {\n  // from Element: extension\n  "contentType" : "<code>", // I Mime type of the content, with charset etc.\n  "language" : "<code>", // Human language of the content (BCP-47)\n  "data" : "<base64Binary>", // I Data inline, base64ed\n  "url" : "<url>", // Uri where the data can be found\n  "size" : "<integer64>", // Number of bytes of content (if url provided)\n  "hash" : "<base64Binary>", // Hash of the data (sha-1, base64ed)\n  "title" : "<string>", // Label to display in place of the data\n  "creation" : "<dateTime>", // Date attachment was first created\n  "height" : "<positiveInt>", // Height of the image in pixels (photo/video)\n  "width" : "<positiveInt>", // Width of the image in pixels (photo/video)\n  "frames" : "<positiveInt>", // Number of frames if > 1 (photo)\n  "duration" : <decimal>, // Length in seconds (audio / video)\n  "pages" : "<positiveInt>" // Number of printed pages\n}\n\n\n\n   ',
    Range: '\n    {\n  // from Element: extension\n  "low" : { Quantity(SimpleQuantity) }, // I Low limit\n  "high" : { Quantity(SimpleQuantity) } // I High limit\n}\n\n\n\n   ',
    Period: '\n    {\n  // from Element: extension\n  "start" : "<dateTime>", // I Starting time with inclusive boundary\n  "end" : "<dateTime>" // I End time with inclusive boundary, if not ongoing\n}\n\n\n\n   ',
    Ratio: '\n    {\n  // from Element: extension\n  "numerator" : { Quantity }, // I Numerator value\n  "denominator" : { Quantity(SimpleQuantity) } // I Denominator value\n}\n\n\n\n   ',
    RatioRange: '\n    {\n  // from Element: extension\n  "lowNumerator" : { Quantity(SimpleQuantity) }, // I Low Numerator limit\n  "highNumerator" : { Quantity(SimpleQuantity) }, // I High Numerator limit\n  "denominator" : { Quantity(SimpleQuantity) } // I Denominator value\n}\n\n\n\n   ',
    CodeableConcept: '\n    {\n  // from Element: extension\n  "coding" : [{ Coding }], // Code defined by a terminology system\n  "text" : "<string>" // Plain text representation of the concept\n}\n\n\n\n   ',
    Coding: '\n    {\n  // from Element: extension\n  "system" : "<uri>", // Identity of the terminology system\n  "version" : "<string>", // Version of the system - if relevant\n  "code" : "<code>", // I Symbol in syntax defined by the system\n  "display" : "<string>", // I Representation defined by the system\n  "userSelected" : <boolean> // If this coding was chosen directly by the user\n}\n\n\n\n   ',
    SampledData: '\n    {\n  // from Element: extension\n  "origin" : { Quantity(SimpleQuantity) }, // R!  Zero value and units\n  "interval" : <decimal>, // I Number of intervalUnits between samples\n  "intervalUnit" : "<code>", // R!  The measurement unit of the interval between samples\n  "factor" : <decimal>, // Multiply data by this before adding to origin\n  "lowerLimit" : <decimal>, // Lower limit of detection\n  "upperLimit" : <decimal>, // Upper limit of detection\n  "dimensions" : "<positiveInt>", // R!  Number of sample points at each time point\n  "codeMap" : "<canonical(ConceptMap)>", // Defines the codes used in the data\n  "offsets" : "<string>", // I Offsets, typically in time, at which data values were taken\n  "data" : "<string>" // Decimal values with spaces, or "E" | "U" | "L", or another code\n}\n\n\n\n   ',
    Money: '\n    {\n  // from Element: extension\n  "value" : <decimal>, // Numerical value (with implicit precision)\n  "currency" : "<code>" // ISO 4217 Currency Code\n}\n\n\n\n   ',
    Annotation: '\n    {\n  // from Element: extension\n  // author[x]: Individual responsible for the annotation. One of these 2:\n  "authorReference" : { Reference(Organization|Patient|Practitioner|\n   PractitionerRole|RelatedPerson) },\n  "authorString" : "<string>",\n  "time" : "<dateTime>", // When the annotation was made\n  "text" : "<markdown>" // R!  The annotation  - text content (as markdown)\n}\n\n\n\n   ',
    Signature: '\n    {\n  // from Element: extension\n  "type" : [{ Coding }], // Indication of the reason the entity signed the object(s)\n  "when" : "<instant>", // When the signature was created\n  "who" : { Reference(Device|Organization|Patient|Practitioner|\n   PractitionerRole|RelatedPerson) }, // Who signed\n  "onBehalfOf" : { Reference(Device|Organization|Patient|Practitioner|\n   PractitionerRole|RelatedPerson) }, // The party represented\n  "targetFormat" : "<code>", // The technical format of the signed resources\n  "sigFormat" : "<code>", // The technical format of the signature\n  "data" : "<base64Binary>" // The actual signature content (XML DigSig. JWS, picture, etc.)\n}\n\n\n\n   ',
};
